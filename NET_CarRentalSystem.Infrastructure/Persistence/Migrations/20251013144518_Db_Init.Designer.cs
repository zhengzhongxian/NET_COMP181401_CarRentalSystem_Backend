// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NET_CarRentalSystem.Infrastructure.Persistence.Contexts;

#nullable disable

namespace NET_CarRentalSystem.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(RenticarWriteDbContext))]
    [Migration("20251013144518_Db_Init")]
    partial class Db_Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Fuel", b =>
                {
                    b.Property<Guid>("FuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fuel_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.HasKey("FuelId");

                    b.ToTable("fuels", (string)null);

                    b.HasData(
                        new
                        {
                            FuelId = new Guid("e1b2c3d4-a5f6-7890-1234-567890abcdef"),
                            CreatedAt = new DateTime(2025, 10, 13, 14, 45, 18, 302, DateTimeKind.Utc).AddTicks(6114),
                            Description = "Sử dụng xăng",
                            IsDeleted = false,
                            Name = "Gasoline"
                        },
                        new
                        {
                            FuelId = new Guid("f2c3d4e5-b6a7-8901-2345-67890abcdef0"),
                            CreatedAt = new DateTime(2025, 10, 13, 14, 45, 18, 302, DateTimeKind.Utc).AddTicks(6117),
                            Description = "Sử dụng dầu Diesel",
                            IsDeleted = false,
                            Name = "Diesel"
                        },
                        new
                        {
                            FuelId = new Guid("a3d4e5f6-c7b8-9012-3456-7890abcdef01"),
                            CreatedAt = new DateTime(2025, 10, 13, 14, 45, 18, 302, DateTimeKind.Utc).AddTicks(6120),
                            Description = "Sử dụng năng lượng điện",
                            IsDeleted = false,
                            Name = "Electric"
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Transmission", b =>
                {
                    b.Property<Guid>("TransmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transmission_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("TransmissionId");

                    b.ToTable("transmissions", (string)null);

                    b.HasData(
                        new
                        {
                            TransmissionId = new Guid("a1b2c3d4-e5f6-a7b8-c9d0-e1f2a3b4c5d6"),
                            Code = "AT",
                            Description = "Hộp số tự động",
                            Name = "Automatic Transmission"
                        },
                        new
                        {
                            TransmissionId = new Guid("b2c3d4e5-f6a7-b8c9-d0e1-f2a3b4c5d6e7"),
                            Code = "MT",
                            Description = "Hộp số sàn",
                            Name = "Manual Transmission"
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("ConditionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition_notes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid?>("FuelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fuel_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastCheckoutAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_checkout_at");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("metadata");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasColumnName("mileage");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("model");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("number_plate");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price_per_hour");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<string>("RealTimeLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("real_time_location");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("thumbnail");

                    b.Property<Guid?>("TransmissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transmission_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("VehicleCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_category_id");

                    b.HasKey("VehicleId");

                    b.HasIndex("FuelId");

                    b.HasIndex("NumberPlate")
                        .IsUnique();

                    b.HasIndex("TransmissionId");

                    b.HasIndex("VehicleCategoryId");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.VehicleCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Seat")
                        .HasColumnType("int")
                        .HasColumnName("seat");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.HasKey("CategoryId");

                    b.ToTable("vehicle_categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a01"),
                            CategoryCode = "SEDAN",
                            CreatedAt = new DateTime(2025, 10, 13, 14, 45, 18, 304, DateTimeKind.Utc).AddTicks(227),
                            Description = "Xe sedan 4-5 chỗ, phổ thông",
                            IsDeleted = false,
                            Seat = 5
                        },
                        new
                        {
                            CategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a02"),
                            CategoryCode = "SUV",
                            CreatedAt = new DateTime(2025, 10, 13, 14, 45, 18, 304, DateTimeKind.Utc).AddTicks(234),
                            Description = "Xe thể thao đa dụng, gầm cao",
                            IsDeleted = false,
                            Seat = 7
                        },
                        new
                        {
                            CategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a03"),
                            CategoryCode = "HATCHBACK",
                            CreatedAt = new DateTime(2025, 10, 13, 14, 45, 18, 304, DateTimeKind.Utc).AddTicks(235),
                            Description = "Xe cỡ nhỏ cho đô thị",
                            IsDeleted = false,
                            Seat = 5
                        },
                        new
                        {
                            CategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a04"),
                            CategoryCode = "MINIVAN",
                            CreatedAt = new DateTime(2025, 10, 13, 14, 45, 18, 304, DateTimeKind.Utc).AddTicks(237),
                            Description = "Xe gia đình, rộng rãi",
                            IsDeleted = false,
                            Seat = 7
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Fuel", "Fuel")
                        .WithMany("Vehicles")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Transmission", "Transmission")
                        .WithMany("Vehicles")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NET_CarRentalSystem.Domain.Entities.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Fuel");

                    b.Navigation("Transmission");

                    b.Navigation("VehicleCategory");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Fuel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Transmission", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
