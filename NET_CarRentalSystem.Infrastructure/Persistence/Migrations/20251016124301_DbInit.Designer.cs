// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NET_CarRentalSystem.Infrastructure.Persistence.Contexts;

#nullable disable

namespace NET_CarRentalSystem.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(RenticarWriteDbContext))]
    [Migration("20251016124301_DbInit")]
    partial class DbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("booking_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("actual_end_date");

                    b.Property<string>("ConditionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition_notes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("DepositRatio")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("deposit_ratio");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<int?>("FuelLevelEnd")
                        .HasColumnType("int")
                        .HasColumnName("fuel_level_end");

                    b.Property<decimal?>("FuelPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fuel_price");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("LatePenaltyRatio")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("late_penalty_ratio");

                    b.Property<int>("MileageStart")
                        .HasColumnType("int")
                        .HasColumnName("mileage_start");

                    b.Property<Guid>("PickupLocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pickup_location_id");

                    b.Property<Guid?>("ReturnLocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("return_location_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id");

                    b.HasKey("BookingId");

                    b.HasIndex("PickupLocationId");

                    b.HasIndex("ReturnLocationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("bookings", (string)null);

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("c1b2c3d4-e5f6-a7b8-c9d0-e1f2a3b4c5d6"),
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 601, DateTimeKind.Utc).AddTicks(2290),
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000001"),
                            DepositRatio = 0m,
                            EndDate = new DateTime(2025, 10, 23, 12, 43, 1, 601, DateTimeKind.Utc).AddTicks(2286),
                            IsDeleted = false,
                            LatePenaltyRatio = 0m,
                            MileageStart = 0,
                            PickupLocationId = new Guid("10000000-0000-0000-0000-000000000001"),
                            ReturnLocationId = new Guid("10000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 10, 21, 12, 43, 1, 601, DateTimeKind.Utc).AddTicks(2282),
                            TotalPrice = 1440m,
                            VehicleId = new Guid("d6e4a8c0-9b1a-4a7a-9a0a-0a0a0a0a0a01")
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Fuel", b =>
                {
                    b.Property<Guid>("FuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fuel_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.HasKey("FuelId");

                    b.ToTable("fuels", (string)null);

                    b.HasData(
                        new
                        {
                            FuelId = new Guid("e1b2c3d4-a5f6-7890-1234-567890abcdef"),
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 601, DateTimeKind.Utc).AddTicks(7144),
                            Description = "Sử dụng xăng",
                            IsDeleted = false,
                            Name = "Gasoline"
                        },
                        new
                        {
                            FuelId = new Guid("f2c3d4e5-b6a7-8901-2345-67890abcdef0"),
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 601, DateTimeKind.Utc).AddTicks(7147),
                            Description = "Sử dụng dầu Diesel",
                            IsDeleted = false,
                            Name = "Diesel"
                        },
                        new
                        {
                            FuelId = new Guid("a3d4e5f6-c7b8-9012-3456-7890abcdef01"),
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 601, DateTimeKind.Utc).AddTicks(7151),
                            Description = "Sử dụng năng lượng điện",
                            IsDeleted = false,
                            Name = "Electric"
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("location_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("opening_hours");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.HasKey("LocationId");

                    b.ToTable("locations", (string)null);

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Address = "123 Lê Lợi, P. Bến Nghé",
                            City = "Hồ Chí Minh",
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 602, DateTimeKind.Utc).AddTicks(374),
                            IsDeleted = false,
                            Latitude = 10.7758,
                            Longitude = 106.702,
                            Name = "Chi nhánh Quận 1",
                            OpeningHours = "8:00 - 20:00",
                            PhoneNumber = "02838123456"
                        },
                        new
                        {
                            LocationId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Address = "456 Xuân Thủy, P. Dịch Vọng Hậu",
                            City = "Hà Nội",
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 602, DateTimeKind.Utc).AddTicks(379),
                            IsDeleted = false,
                            Latitude = 21.036000000000001,
                            Longitude = 105.782,
                            Name = "Chi nhánh Cầu Giấy",
                            OpeningHours = "7:30 - 19:30",
                            PhoneNumber = "02439123456"
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Transmission", b =>
                {
                    b.Property<Guid>("TransmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transmission_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("TransmissionId");

                    b.ToTable("transmissions", (string)null);

                    b.HasData(
                        new
                        {
                            TransmissionId = new Guid("a1b2c3d4-e5f6-a7b8-c9d0-e1f2a3b4c5d6"),
                            Code = "AT",
                            Description = "Hộp số tự động",
                            Name = "Automatic Transmission"
                        },
                        new
                        {
                            TransmissionId = new Guid("b2c3d4e5-f6a7-b8c9-d0e1-f2a3b4c5d6e7"),
                            Code = "MT",
                            Description = "Hộp số sàn",
                            Name = "Manual Transmission"
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("ConditionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition_notes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid?>("FuelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fuel_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastCheckoutAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_checkout_at");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("location_id");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("metadata");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasColumnName("mileage");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("model");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("number_plate");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price_per_hour");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<string>("RealTimeLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("real_time_location");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("thumbnail");

                    b.Property<Guid?>("TransmissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transmission_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("VehicleCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_category_id");

                    b.HasKey("VehicleId");

                    b.HasIndex("FuelId");

                    b.HasIndex("LocationId");

                    b.HasIndex("NumberPlate")
                        .IsUnique();

                    b.HasIndex("TransmissionId");

                    b.HasIndex("VehicleCategoryId");

                    b.ToTable("vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleId = new Guid("d6e4a8c0-9b1a-4a7a-9a0a-0a0a0a0a0a01"),
                            Color = "Bạc",
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 604, DateTimeKind.Utc).AddTicks(6543),
                            FuelId = new Guid("e1b2c3d4-a5f6-7890-1234-567890abcdef"),
                            IsDeleted = false,
                            LocationId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Manufacturer = "Toyota",
                            Mileage = 15000,
                            Model = "Vios",
                            NumberPlate = "51K-123.45",
                            PricePerHour = 30m,
                            Rating = 4.5f,
                            Status = "Available",
                            TransmissionId = new Guid("a1b2c3d4-e5f6-a7b8-c9d0-e1f2a3b4c5d6"),
                            VehicleCategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a01")
                        },
                        new
                        {
                            VehicleId = new Guid("d6e4a8c0-9b1a-4a7a-9a0a-0a0a0a0a0a02"),
                            Color = "Đen",
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 604, DateTimeKind.Utc).AddTicks(6553),
                            FuelId = new Guid("f2c3d4e5-b6a7-8901-2345-67890abcdef0"),
                            IsDeleted = false,
                            LocationId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Manufacturer = "Ford",
                            Mileage = 5000,
                            Model = "Everest",
                            NumberPlate = "29A-678.90",
                            PricePerHour = 50m,
                            Rating = 4.8f,
                            Status = "Available",
                            TransmissionId = new Guid("a1b2c3d4-e5f6-a7b8-c9d0-e1f2a3b4c5d6"),
                            VehicleCategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a02")
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.VehicleAttribute", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attribute_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AttributeKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("attribute_key");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attribute_value");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id");

                    b.HasKey("AttributeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_attributes", (string)null);
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.VehicleCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Seat")
                        .HasColumnType("int")
                        .HasColumnName("seat");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.HasKey("CategoryId");

                    b.ToTable("vehicle_categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a01"),
                            CategoryCode = "SEDAN",
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 603, DateTimeKind.Utc).AddTicks(7090),
                            Description = "Xe sedan 4-5 chỗ, phổ thông",
                            IsDeleted = false,
                            Seat = 5
                        },
                        new
                        {
                            CategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a02"),
                            CategoryCode = "SUV",
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 603, DateTimeKind.Utc).AddTicks(7093),
                            Description = "Xe thể thao đa dụng, gầm cao",
                            IsDeleted = false,
                            Seat = 7
                        },
                        new
                        {
                            CategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a03"),
                            CategoryCode = "HATCHBACK",
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 603, DateTimeKind.Utc).AddTicks(7129),
                            Description = "Xe cỡ nhỏ cho đô thị",
                            IsDeleted = false,
                            Seat = 5
                        },
                        new
                        {
                            CategoryId = new Guid("f7a3f3a0-3b1a-4b0a-8f0a-0a0a0a0a0a04"),
                            CategoryCode = "MINIVAN",
                            CreatedAt = new DateTime(2025, 10, 16, 12, 43, 1, 603, DateTimeKind.Utc).AddTicks(7130),
                            Description = "Xe gia đình, rộng rãi",
                            IsDeleted = false,
                            Seat = 7
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.VehicleImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("image_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AltText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("alt_text");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("caption");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("public_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id");

                    b.HasKey("ImageId");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_images", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("20000000-0000-0000-0000-000000000001"),
                            AltText = "Ảnh ngoại thất Toyota Vios",
                            ImageUrl = "https://hientoyota.vn/wp-content/uploads/2019/05/Toyota-Vios-1.jpg",
                            Order = 1,
                            VehicleId = new Guid("d6e4a8c0-9b1a-4a7a-9a0a-0a0a0a0a0a01")
                        },
                        new
                        {
                            ImageId = new Guid("20000000-0000-0000-0000-000000000002"),
                            AltText = "Ảnh nội thất Toyota Vios",
                            ImageUrl = "https://toyotatanphu.vn/quannguyenphat/uploads/2019/06/Vios-Nau-vang.png.webp",
                            Order = 2,
                            VehicleId = new Guid("d6e4a8c0-9b1a-4a7a-9a0a-0a0a0a0a0a01")
                        },
                        new
                        {
                            ImageId = new Guid("20000000-0000-0000-0000-000000000003"),
                            AltText = "Ảnh ngoại thất Ford Everest",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSKY7Bfrr6iP-Al8YWIBsqEjOfrRn0EZ--QMg&s",
                            Order = 1,
                            VehicleId = new Guid("d6e4a8c0-9b1a-4a7a-9a0a-0a0a0a0a0a02")
                        });
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Booking", b =>
                {
                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Location", "PickupLocation")
                        .WithMany("PickupsFromLocation")
                        .HasForeignKey("PickupLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Location", "ReturnLocation")
                        .WithMany("ReturnsToLocation")
                        .HasForeignKey("ReturnLocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PickupLocation");

                    b.Navigation("ReturnLocation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Fuel", "Fuel")
                        .WithMany("Vehicles")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Location", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("LocationId");

                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Transmission", "Transmission")
                        .WithMany("Vehicles")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NET_CarRentalSystem.Domain.Entities.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Fuel");

                    b.Navigation("Transmission");

                    b.Navigation("VehicleCategory");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.VehicleAttribute", b =>
                {
                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleAttributes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.VehicleImage", b =>
                {
                    b.HasOne("NET_CarRentalSystem.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleImages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Fuel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Location", b =>
                {
                    b.Navigation("PickupsFromLocation");

                    b.Navigation("ReturnsToLocation");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Transmission", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("VehicleAttributes");

                    b.Navigation("VehicleImages");
                });

            modelBuilder.Entity("NET_CarRentalSystem.Domain.Entities.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
